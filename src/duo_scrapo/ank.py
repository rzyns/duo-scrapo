from pathlib import Path

import anki
import anki.collection
import anki.decks
import anki.errors
import anki.hooks
import anki.models
import anki.notes

from attr import asdict
from rich import print  # noqa: A004

# import duo_scrapo.templates.czasowniki
from duo_scrapo.Morf import VerbForms
from duo_scrapo.templates import AnkiTemplate
import duo_scrapo.templates.czasowniki
from duo_scrapo.export import export_czasowniki
from duo_scrapo.words.vocab import load_vocabulary


class ModelAlreadyExistsError(Exception):
    def __init__(self, message: str = "Model already exists"):
        self.message = message
        super().__init__(self.message)


def add_fields_to_note_type(col: anki.collection.Collection, note_type: anki.models.NoteType, fields: tuple[str, ...]):
    model = col.models.by_name(note_type["name"])
    if model is None:
        model = note_type

    for field_name in fields:
        if field_name in col.models.field_names(model):
            continue

        field = col.models.new_field(field_name)
        col.models.add_field(model, field)


def add_template(col: anki.collection.Collection, note_type: anki.models.NoteType, tpl: AnkiTemplate):
    if tpl.name not in note_type['tmpls']:
        template = col.models.new_template(tpl.name)
        for k, a in asdict(tpl).items():
            template[k] = a
        note_type['tmpls'].append(template)
    return note_type


def add_note_to_collection(col: anki.collection.Collection, note_type: anki.models.NoteType, note: dict[str, str]) -> anki.notes.Note:
    # Generated by Copilot
    """
    Adds notes to the given Collection.

    Parameters:
    col (anki.collection.Collection): The Anki collection.
    note_type (anki.models.NoteType): The NoteType to which the notes will be added.
    notes (Iterable[anki.notes.Note]): An iterable of notes to add to the Collection.
    """
    new_note = col.new_note(notetype=note_type)
    for field_name, field_value in note.items():
        new_note[field_name] = field_value
    col.add_note(new_note, deck_id=anki.decks.DeckId(0))
    return new_note


# Ścieżka do pliku kolekcji Anki
# filepath = Path.cwd() / "dev/collection.anki2"
# filepath = Path.cwd() / "rzyns/collection.anki2"
filepath = Path.cwd() / "base/User 1/collection.anki2"

# Usuń istniejący plik, jeśli istnieje
# if filepath.exists():
#     filepath.unlink()

# Otwórz kolekcję Anki
col = anki.collection.Collection(filepath.as_posix())

# Sprawdź, czy typ notatki "Czasowniki" już istnieje
czasowniki = col.models.by_name("Czasowniki")

if czasowniki is None:
    # Utwórz nowy typ notatki
    czasowniki = col.models.new("Czasowniki")

    # Dodaj pola do typu notatki
    # add_fields_to_note_type(col, new_note_type, ("Front", "Back", "pl", "en"))
    add_fields_to_note_type(col, czasowniki, ("pl", "en"))
    add_fields_to_note_type(col, czasowniki, VerbForms.get_cols())

    seen: list[str] = []
    # Dodaj szablon do typu notatki
    for tpl in duo_scrapo.templates.czasowniki.templates:
        add_template(col, czasowniki, tpl)
        seen.append(tpl.qfmt)

    try:
        # Dodaj nowy typ notatki do kolekcji
        col.models.add(czasowniki)
    except anki.errors.CardTypeError:
        print(dict(enumerate(duo_scrapo.templates.czasowniki.templates)))
        raise

vocab = load_vocabulary()
for (word, forms) in export_czasowniki(vocab):
    # Utwórz nową notatkę
    add_note_to_collection(col, czasowniki, dict(
        pl=word.term,
        en=word.definition,
        **forms.as_dict(),
    ))

# Zapisz zmiany i zamknij kolekcję
col.save()
col.close()

print("Notatka została dodana do kolekcji Anki.")
